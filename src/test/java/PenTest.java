import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.lang.reflect.Field;

import static org.testng.Assert.*;

public class PenTest {

   /* @DataProvider
    public Object[][] Name() {
        return new Object[][]{
                { },
                { },
                { },
        };
        @DataProvider (name = "inkContainerValuePositiveTest")
    public Object[][] inkContainerValue() {
        return new Object[][]{
                {1000},
                {200},
                {600 },
                {Integer.MAX_VALUE},
                {Integer.MIN_VALUE}
        };
      */

/*    private final int inkContainerValue = 1000;
    private final double sizeLetter = 1.0;
    private final String color = "BLUE";

    Pen pen = new Pen(inkContainerValue, sizeLetter, color);*/

    @Test
    public void testWrite() {
    }

/*    @DataProvider(name = "Colors")
    public Object[][] Colors() {
        return new Object[][]{
                {1000, 1, "BLUE"},
                {1000, 1, "Green"},
             *//*   {"Red"},
                {"Yellow"},*//*
                      };
    }*/
/*
    @DataProvider(name = "Colors")
    public Object[][] Colors() {
        return new Object[][]{
                {"BLUE"},
                {"Green"},
                {"Red"},
                {"Yellow"},
        };
    }*/
    @DataProvider(name = "inkContainerValue")
    public Object[][] inkContainerValue() {
        return new Object[][]{
                {1000},
                {500},
                {50},
                {5},
                {Integer.MAX_VALUE}
        };
    }

    @Test(dataProvider = "inkContainerValue" )
    public void inkContainerValueConstructorTest( int inkContainerValue) throws NoSuchFieldException, IllegalAccessException{
        Pen testPen = new Pen(inkContainerValue);
        Field field = Pen.class.getDeclaredField("inkContainerValue");
        field.setAccessible(true);
        assertEquals(field.get(testPen), inkContainerValue);
    }
    @DataProvider(name = "sizeLetterConstructor")
    public Object[][] sizeLetter() {
        return new Object[][]{
                {1000, 1,},
                {1000, 2.0,},
                  {800, 3.6},
                {800, 5.0},
                      };
    }

    @Test(dataProvider = "sizeLetterConstructor")
    public void inkContainerValueAndSizeLetterConstructorTest(int inkContainerValue, double sizeLetter)throws NoSuchFieldException, IllegalAccessException{
        Pen testPen= new Pen(inkContainerValue, sizeLetter);
        Field sizeLetterField = Pen.class.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
       assertTrue(sizeLetterField.get(testPen).equals(sizeLetter) & inkContainerValueField.get(testPen).equals(inkContainerValue));

       /* assertEquals(sizeLetterField.get(testPen), sizeLetter);
        assertEquals(inkContainerValueField.get(testPen), inkContainerValue);*/
    }
}

/*
    @Test(dataProvider = "Colors")
    public void testGetColor(int inkContainer, double size, String color) {
Pen pen = new Pen ( inkContainer, size, color );
        assertEquals(pen.getColor(),color);
    }

    @Test(dataProvider = "Colors")
    public void testConstructor(int inkContainer, double size) throws NoSuchFieldException, IllegalAccessException{
        Pen pen = new Pen ( inkContainer, size);
        Field field = Pen.class.getDeclaredField("sizeLetter");
        field.setAccessible(true);
        assertEquals(field.get(pen),size);
    }

    @Test
    public void testIsWork() {
    }

    @Test
    public void testDoSomethingElse() {
    }
}*/