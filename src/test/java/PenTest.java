/*import org.testng.Assert;*/

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Field;

import static org.testng.Assert.*;


public class PenTest {
    SoftAssert softAssert = new SoftAssert();

    @DataProvider(name = "inkContainerValuePositive")
    public Object[][] inkContainerValuePositive() {
        return new Object[][]{
                {1000},
                {500},
                {50},
                {5},
                {0},
                {Integer.MAX_VALUE}
        };
    }

    @Test(dataProvider = "inkContainerValuePositive")
    public void inkContainerValueConstructorPositiveTest(int inkContainerValue) throws NoSuchFieldException, IllegalAccessException {
        //inkContainerValue constructor positive test
        Pen testPen = new Pen(inkContainerValue);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        assertEquals(inkContainerValueField.get(testPen), inkContainerValue, "The inkContainerValue is not set");
    }

    @DataProvider(name = "inkContainerValueNegative")
    public Object[][] inkContainerValueNegative() {
        return new Object[][]{
                {Integer.MIN_VALUE},
                {-1000},
                {-100},
                {-10},
                {-1},
        };
    }

    @Test(dataProvider = "inkContainerValueNegative", dependsOnMethods = "inkContainerValueConstructorPositiveTest")
    public void inkContainerValueConstructorNegativeTest(int inkContainerValue) throws NoSuchFieldException, IllegalAccessException {
        //Expected result : values are not set
        Pen testPen = new Pen(inkContainerValue);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        assertNotEquals(inkContainerValueField.get(testPen),inkContainerValue,
                "Result:The negative inkContainerValue is set. Expected result: Negative values are not set.");
    }


    @DataProvider(name = "inkContainerValueAndSizeLetterPositive")
    public Object[][] sizeLetterPositive() {
        return new Object[][]{
                {Integer.MAX_VALUE, Double.MAX_VALUE},
                {1000, 1000,},
                {100, 200.4,},
                {80, 30.50},
                {8, 5.0},
                {0, 0}
        };
    }

    @Test(dataProvider = "inkContainerValueAndSizeLetterPositive", dependsOnMethods = "inkContainerValueConstructorPositiveTest")
    public void inkContainerValueAndSizeLetterConstructorPositiveTest(int inkContainerValue, double sizeLetter) throws NoSuchFieldException, IllegalAccessException {
        Pen testPen = new Pen(inkContainerValue, sizeLetter);
        Field sizeLetterField = Pen.class.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        softAssert.assertEquals(inkContainerValueField.get(testPen), inkContainerValue,
                "The inkContainerValue is not set");
        softAssert.assertEquals(sizeLetterField.get(testPen), sizeLetter, "The sizeLetter is not set");
        softAssert.assertAll();
    }

    @DataProvider(name = "inkContainerValueAndSizeLetterNegative")
    public Object[][] sizeLetterNegative() {
        return new Object[][]{
                {Integer.MAX_VALUE, Double.MAX_VALUE},
                {1000, 1000,},
                {100, 200.4,},
                {80, 30.50},
                {8, 5.0},
                {0, 0}
        };
    }

    @Test(dataProvider = "inkContainerValueAndSizeLetterNegative")
    public void inkContainerValueAndSizeLetterConstructorNegativeTest(int inkContainerValue, double sizeLetter) throws NoSuchFieldException, IllegalAccessException {
        //Expected result : negative values are not set
        Pen testPen = new Pen(inkContainerValue, sizeLetter);
        Field sizeLetterField = Pen.class.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        softAssert.assertTrue(inkContainerValueField.get(testPen).equals(inkContainerValue),
                "Result:The negative inkContainerValue is set. Expected result: Negative values are not set.");
        softAssert.assertTrue(sizeLetterField.get(testPen).equals(sizeLetter),
                "Result:The negative sizeLetter is set. Expected result: Negative values are not set.");
        softAssert.assertAll();
    }

    @DataProvider(name = "inkContainerValueSizeLetterColorsConstructorPositive")
    public Object[][] ColorsPositiveTest() {
        return new Object[][]{
                {1000, 1.0, "BLUE"},
                {500, 2.5, "GREEN"},
                {50, 10.0, "RED"},
                {5, 0.2, "YELLOW"},
                {0, 0, "#3cb371"}
        };
    }

    @Test(dataProvider = "inkContainerValueSizeLetterColorsConstructorPositive")
    public void inkContainerValueSizeLetterColorsConstructorPositiveTest(int inkContainerValue, double sizeLetter, String color) throws NoSuchFieldException, IllegalAccessException {
        Pen testPen = new Pen(inkContainerValue, sizeLetter, color);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        Field sizeLetterField = Pen.class.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        Field colorField = Pen.class.getDeclaredField("color");
        colorField.setAccessible(true);
        softAssert.assertEquals(inkContainerValueField.get(testPen), inkContainerValue,
                "The inkContainerValue is not set");
        softAssert.assertEquals(sizeLetterField.get(testPen), sizeLetter, "The sizeLetter value is not set");
        softAssert.assertEquals(colorField.get(testPen), color, "The color value is not set");
        softAssert.assertAll();
    }

    @DataProvider(name = "inkContainerValueSizeLetterColorsConstructorNegative")
    public Object[][] ColorsNegativeTest() {
        return new Object[][]{
                {1000, 1.0, ""},
                {500, 2.5, " "},
                {50, 10.0, "!$@%^&*()/-+=_"},
                {0, 0, "  RED  "}
        };
    }

    @Test(dataProvider = "inkContainerValueSizeLetterColorsConstructorNegative")
    public void inkContainerValueSizeLetterColorsConstructorNegativeTest(int inkContainerValue, double sizeLetter, String color) throws NoSuchFieldException, IllegalAccessException {
        Pen testPen = new Pen(inkContainerValue, sizeLetter, color);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        Field sizeLetterField = Pen.class.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        Field colorField = Pen.class.getDeclaredField("color");
        colorField.setAccessible(true);
        softAssert.assertFalse(inkContainerValueField.get(testPen).equals(inkContainerValue),
                "Result:The negative inkContainerValue is set. Expected result: Negative values are not set.");
        softAssert.assertFalse(sizeLetterField.get(testPen).equals(sizeLetter),
                "Result:The negative sizeLetter is set. Expected result: Negative values are not set.");
        softAssert.assertFalse(colorField.get(testPen).equals(color), "The color value is not set");
        softAssert.assertAll();
    }

    @Test(dataProvider = "inkContainerValueSizeLetterColorsConstructorPositive",priority = 1)
    public void testGetColor(int inkContainerValue, double sizeLetter, String color) {
        Pen testPen = new Pen(inkContainerValue, sizeLetter, color);
        assertEquals(testPen.getColor(), color);
    }

    @DataProvider(name = "isWorkPositiveTest")
    public Object[][] isWorkPositiveTest() {
        return new Object[][]{
                {1000},
                {500},
                {50},
                {5},
                {Integer.MAX_VALUE}
        };
    }

    @Test(dataProvider = "isWorkPositiveTest", dependsOnMethods = "inkContainerValueConstructorPositiveTest",priority = 1)
    public void positiveTestIsWork(int inkContainerValue) {
        Pen testPen = new Pen(inkContainerValue);
        assertTrue(testPen.isWork(), "Pen is not working. Expected result: Pen should work");
    }

    @DataProvider(name = "isWorkNegativeTest")
    public Object[][] isWorkNegativeTest() {
        return new Object[][]{
                {0},
                {-1},
                {-10},
                {-100},
                {-1000},
                {Integer.MIN_VALUE}
        };
    }

    @Test(dataProvider = "isWorkNegativeTest", dependsOnMethods = {"positiveTestIsWork", "inkContainerValueConstructorPositiveTest"},priority = 1)
    public void negativeTestIsWork(int inkContainerValue) {
        Pen testPen = new Pen(inkContainerValue);
        assertFalse(testPen.isWork(), "Pen is working. Expected result: Pen is not working");
    }

    @DataProvider(name = "SmokeTestWrite")
    public Object[][] smokeTestWrite() {
        return new Object[][]{
                {Integer.MAX_VALUE, "hello world"},
                {1000, "Test write"},
                {100, "Test write"},
                {80, "Test write"},
                {8, "Test"}
        };
    }

    @Test(dataProvider = "SmokeTestWrite", dependsOnMethods = "positiveTestIsWork",priority = 2)
    public void positiveTestWrite(int inkContainerValue, String word) {
        Pen testPen = new Pen(inkContainerValue);
        assertEquals(testPen.write(word), (word));

    }

    @DataProvider(name = "NegativeTestWrite")
    public Object[][] inkContainerNegativeTest() {
        return new Object[][]{
                {0, 1, "small"},
                {0, 15, "middle size"},
                {0, 150, "Very big string is here"},
                {0, 1500, "Verylongday"}
        };
    }

    @Test(dataProvider = "NegativeTestWrite",priority = 2)
    public void NegativeTestWrite(int inkContainerValue, double sizeLetter, String word) {
        Pen testPen = new Pen(inkContainerValue, sizeLetter);
        assertEquals(testPen.write(word), "","The result doesn't match expected result");
    }

    @DataProvider(name = "inscription")
    public Object[][] inscription() {
        return new Object[][]{
                {10, 1, "1234567890", "1234567890"},
                {5, 1, "1234567890", "12345"},
                {20, 2, "1234567890", "1234567890"},
                {10, 2, "1234567890", "12345"},
                {15, 5.0, "abcd", "abc"},
                {150, 75, "hello", "he"}
        };
    }

    @Test(dataProvider = "inscription",priority = 3)
    public void inscriptionTest(int inkContainerValue, double sizeLetter, String word, String inscription) {
        Pen testPen = new Pen(inkContainerValue, sizeLetter);
        assertEquals(testPen.write(word), inscription, "Result doesn't match expected result");
    }

    @DataProvider(name = "inkConsumption")
    public Object[][] inkConsumption() {
        return new Object[][]{
                {10, 1, "abcdefg", "ABCDEFG"},
                {5, 1, "helloworld", "HelloWorld"},
                {10, 2, "man", "Man"}
        };
    }

    @Test(dataProvider = "inkConsumption",priority = 3)
    public void inkConsumptionTest(int inkContainerValue, double sizeLetter, String wordOne, String wordTwo) throws NoSuchFieldException, IllegalAccessException {
        Pen testPen = new Pen(inkContainerValue, sizeLetter);
        Pen testPenTwo = new Pen(inkContainerValue, sizeLetter);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        testPen.write(wordOne);
        testPenTwo.write(wordTwo);
        assertNotEquals(inkContainerValueField.get(testPenTwo),(inkContainerValueField.get(testPen)),"UpperCase letters should consume more ink.");
    }

    @DataProvider(name = "spacesTest")
    public Object[][] spacesTest() {
        return new Object[][]{
                {10, 1, "ABC", "A B C"},
                {5, 1, "1 2 3", "123"},
                {10, 2, "1           ", "1"},
                {10, 1, "       1", "1"}
        };
    }

    @Test(dataProvider = "spacesTest",priority = 3)
    public void spacesInkConsumptionTest(int inkContainerValue, double sizeLetter, String wordOne, String wordTwo) throws NoSuchFieldException, IllegalAccessException {
        Pen testPen = new Pen(inkContainerValue, sizeLetter);
        Pen testPenTwo = new Pen(inkContainerValue, sizeLetter);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        testPen.write(wordOne);
        testPenTwo.write(wordTwo);
        assertEquals(inkContainerValueField.get(testPen), inkContainerValueField.get(testPenTwo), "Spaces should not consume ink.");
    }


    @Test (dataProvider = "inkContainerValueSizeLetterColorsConstructorPositive",priority = 2)
    public void testDoSomethingElse(int inkContainerValue, double sizeLetter, String color) {
        Pen testPen = new Pen(inkContainerValue,sizeLetter,color);
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        System.setOut(new PrintStream(output));
        testPen.doSomethingElse();
        assertEquals(color,output.toString().trim());
    }

}

