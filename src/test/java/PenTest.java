/*import org.testng.Assert;*/
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import java.lang.reflect.Field;

import static org.testng.Assert.*;


public class PenTest {
SoftAssert softAssert= new SoftAssert();
   /* @DataProvider
    public Object[][] Name() {
        return new Object[][]{
                { },
                { },
                { },
        };
        }
      */

    @DataProvider(name = "inkContainerValuePositive")
    public Object[][] inkContainerValue() {
        return new Object[][]{
                {1000},
                {500},
                {50},
                {5},
                {Integer.MAX_VALUE}
        };
    }

    @Test(dataProvider = "inkContainerValuePositive")
    public void inkContainerValueConstructorTest(int inkContainerValue) throws NoSuchFieldException, IllegalAccessException {
        Pen testPen = new Pen(inkContainerValue);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        assertEquals(inkContainerValueField.get(testPen), inkContainerValue);
    }

    @DataProvider(name = "inkContainerValueAndSizeLetter")
    public Object[][] sizeLetter() {
        return new Object[][]{
                {1000, 1,},
                {1000, 2.0,},
                {800, 3.6},
                {800, 5.0},
        };
    }

    @Test(dataProvider = "inkContainerValueAndSizeLetter")
    public void inkContainerValueAndSizeLetterConstructorTest(int inkContainerValue, double sizeLetter) throws NoSuchFieldException, IllegalAccessException {
        Pen testPen = new Pen(inkContainerValue, sizeLetter);
        Field sizeLetterField = Pen.class.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        softAssert.assertEquals(inkContainerValueField.get(testPen), inkContainerValue);
        softAssert.assertEquals(sizeLetterField.get(testPen), sizeLetter);
        softAssert.assertAll();

        /* hard assert
        assertTrue(sizeLetterField.get(testPen).equals(sizeLetter) && inkContainerValueField.get(testPen)
                                                                                            .equals(inkContainerValue),
                "The constructor doesn't work, attributes are not set correctly.");
       assertEquals(sizeLetterField.get(testPen), sizeLetter);
        assertEquals(inkContainerValueField.get(testPen), inkContainerValue);*/
    }



    @DataProvider(name = "inkContainerValueSizeLetterColorsConstructor")
    public Object[][] Colors() {
        return new Object[][]{
                {1000, 1.0, "BLUE"},
                {500, 2.5, "GREEN"},
                {50, 10.0, "RED"},
                {5, 0.2, "YELLOW"},
        };
    }

    @Test(dataProvider = "inkContainerValueSizeLetterColorsConstructor")
    public void inkContainerValueSizeLetterColorsConstructorTest(int inkContainerValue, double sizeLetter, String color) throws NoSuchFieldException, IllegalAccessException {
    Pen testPen = new Pen(inkContainerValue, sizeLetter, color);
        Field inkContainerValueField = Pen.class.getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        Field sizeLetterField = Pen.class.getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        Field colorField = Pen.class.getDeclaredField("color");
        colorField.setAccessible(true);
        softAssert.assertEquals(inkContainerValueField.get(testPen), inkContainerValue);
        softAssert.assertEquals(sizeLetterField.get(testPen), sizeLetter);
        softAssert.assertEquals(colorField.get(testPen), color);
        softAssert.assertAll();
        //assertTrue(sizeLetterField.get(testPen).equals(sizeLetter) && inkContainerValueField.get(testPen).equals(inkContainerValue)&& colorField.get(testPen)
          //  .equals(color),"The constructor doesn't work, inkContainerValue/sizeLetter/color are not set correctly.");
           }
    @Test(dataProvider = "inkContainerValueSizeLetterColorsConstructor", dependsOnMethods = "inkContainerValueSizeLetterColorsConstructorTest")
    public void testGetColor(int inkContainerValue, double sizeLetter, String color){
        Pen testPen = new Pen(inkContainerValue, sizeLetter, color);
        assertEquals(testPen.getColor(), color);
    }

    @Test(dataProvider ="inkContainerValuePositive", dependsOnMethods = "inkContainerValueConstructorTest")
    public void positiveTestIsWork(int inkContainerValue) {
        Pen testPen = new Pen(inkContainerValue);
        assertTrue(testPen.isWork(), "Pen is not working. Expected result: Pen should work");
    }

    @DataProvider(name = "inkContainerValueNegative")
    public Object[][] Name() {
        return new Object[][]{
                {Integer.MIN_VALUE},
                {-1000},
                {-100},
                {-10},
                {-1},
                {0}
        };
    }

    @Test(dataProvider ="inkContainerValueNegative", dependsOnMethods = "positiveTestIsWork")
    public void negativeTestIsWork(int inkContainerValue) {
        Pen testPen = new Pen(inkContainerValue);
        assertFalse(testPen.isWork(), "Pen is working. Expected result: Pen is not working");
    }

        @Test
        public void positiveTestWrite () {

        }

        @Test(dataProvider = "inkContainerValueNegative", dependsOnMethods ="negativeTestIsWork" )
        public void NegativeTestWrite (int inkContainerValue) {
            Pen testPen = new Pen(inkContainerValue);
            String word = "MAN";
            assertEquals(testPen.write(word), "");
    }
    @Test(dataProvider = "inkContainerValuePositive")
    public void writeTest(int inkContainerValue){
    Pen testPen = new Pen(inkContainerValue);
    String word = "123456789";
    System.out.println(testPen.write(word));
    }


        @Test
        public void testDoSomethingElse () {

        }

    }
